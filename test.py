# test.py
# Exercise FastAPI endpoints:
#   - GET  /health, /model, /embed/whoami (optional), /embed/debug (optional)
#   - POST /combine-match
#   - POST /search (optional, if implemented)
#   - POST /embed/restart_one/{id} (optional)
#   - POST /embed/restart_all (optional)
#
# Examples:
#   python test.py --base http://127.0.0.1:8000
#   python test.py --base http://127.0.0.1:8000 --no-admin --no-search
#   python test.py --base http://127.0.0.1:8000 --id "water_main_breaks/feature/8110"
#   python test.py --base http://127.0.0.1:8000 --limit 25 --bypass-dataset
#   python test.py --base http://127.0.0.1:8000 --search "cast iron main break" --topk 10 --dataset water_main_breaks
#
import argparse
import json
import os
import time
import requests

DEFAULT_RESUME = (
    "Leonardo Nigro Computer Engineering Jobs@leonardonigro.com "
    "www.leonardonigro.com https://github.com/Leosly7663 "
    "TECHNICAL SKILLS Programming Languages: JavaScript, Python, C, Java, MySQL "
    "Frameworks and Services: React, AWS, Flask, GitHub, Azure DevOps, MS Power Platform "
    "Operating Systems: Windows XP/Vista/10/11, Linux Mint/Ubuntu/Red Hat, MacOS "
    "PROFESSIONAL EXPERIENCE "
    "Coop Student Software Solutions | Government of Canada June 2024 - May 2025 "
    "• Conceptualized and designed the IT skills and personal development center. "
    "• Met directly with clients to deliver a superior solution that met all requirements and use cases. "
    "• Deployed a fully functional internal tool to be used inter-departmentally throughout the government with a userbase of 1000+ civilian and IT developers. "
    "Student Developer | Life of A Server INC. April 2023 – Dec 2023 "
    "• Proficiently used Typescript with React to ensure scalable industry-standard code. "
    "• Maintained AWS EC2 and RDS instances for E-Commerce center leveraging a monolithic architecture. "
    "• Documented sprints, story points, logs, issues, bugs, source control, and workflows through GitHub. "
    "PROJECTS WEATHER DATA ANALYSIS | Personal Project February 2024 "
    "• Developed a Python web-scraping script to pull live data from weather.gc.ca and store in a document-style database, collecting data from 100+ cities. "
    "• Utilized GitHub Actions to automate scripting calls every hour allowing for a constant stream of data. "
    "• Plotted best fits, percentile error, standard deviation and regression through Matplotlib. "
    "PYTHON WEATHER HUD | Personal Project January 2024 "
    "• Integrated beautifulsoup4 and pillow to facilitate the download of scraped images and temporarily cache them for immediate retrieval without API calls. "
    "• Built a UI through tk desktop with custom settings and city selection. "
    "POWERPOINT GPT | Personal Project February 2022 "
    "• Developed a fully functional Python wrapper to interact with GPT-4.0 API access keys, seamlessly incorporating Python's capabilities into PowerPoint generation. "
    "• Integrated python-pptx to develop automated presentation generation. Facilitated dynamic slide creation using content generated by GPT-4.0, enabling rapid production of professional-quality presentations. "
    "Astro Brick | Personal Project May 2021 "
    "• Created a retro style mini game in JavaScript for web with player lives, a pause menu, and immersive controls. "
    "• Due to a lack of game engine, mouse tracking, player movement, and collisions were all hard-coded in JS. "
    "EDUCATION The University of Guelph | Bachelor of Engineering Computer Engineering Co-op April 2027 "
    "Relevant Courses Software: Data Structures, Object Oriented Programming, Discrete Structures in Computing "
    "Relevant Courses Hardware: Computer Architecture, Digital Design, Computer Organization, Electric Circuits "
    "http://www.leonardonigro.com/ https://github.com/Leosly7663"
)

DEFAULT_JOB_SENTENCES = [
    "Experience working with cloud services like AWS.",
    "Ability to build user interfaces with React.",
    "Knowledge of data analysis and visualization.",
]

DEFAULT_SEARCH_Q = "water main break corrosion ZELLER CRT"


def pretty(obj):
    return json.dumps(obj, indent=2, ensure_ascii=False)


def show_response(resp, label):
    print(f"\n===== {label} | STATUS CODE =====")
    print(resp.status_code)
    try:
        data = resp.json()
        print("\n===== JSON =====")
        print(pretty(data))
    except Exception:
        print("\n===== RAW TEXT =====")
        print((resp.text or "").strip()[:4000])


def main():
    ap = argparse.ArgumentParser()
    ap.add_argument("--base", default=os.getenv("API_BASE", "http://127.0.0.1:8000"), help="API base URL")
    # combine-match flags
    ap.add_argument("--normalize", action="store_true", help="Send normalize=true to /combine-match")
    ap.add_argument("--topk", type=int, default=1, help="topK for /combine-match")
    # search flags
    ap.add_argument("--no-search", action="store_true", help="Skip /search")
    ap.add_argument("--search", dest="search_q", default=os.getenv("SEARCH_Q", DEFAULT_SEARCH_Q), help="Query text")
    ap.add_argument("--semantic-only", action="store_true", help="Use hybrid=false (pure vector)")
    ap.add_argument("--search-topk", type=int, default=10, help="topK for /search")
    ap.add_argument("--dataset", default=os.getenv("DATASET"), help="datasetSlug filter for /search and /embed/restart_all")
    ap.add_argument("--kind", default=os.getenv("KIND", "feature"), help="kind filter (e.g., feature)")
    ap.add_argument("--lat", type=float, help="lat for geo filter")
    ap.add_argument("--lon", type=float, help="lon for geo filter")
    ap.add_argument("--radius", type=float, help="radius_km for geo filter")
    # admin flags
    ap.add_argument("--no-admin", action="store_true", help="Skip admin endpoints")
    ap.add_argument("--id", dest="doc_id", default=os.getenv("DOC_ID"), help="Document id for /embed/restart_one/{id}")
    ap.add_argument("--limit", type=int, default=16, help="Limit for /embed/restart_all (0 = no limit)")
    ap.add_argument("--page-size", type=int, default=500, help="Page size for /embed/restart_all scan")
    ap.add_argument("--bypass-dataset", action="store_true", help="Use datasetSlug='*' to bypass dataset filter")
    args = ap.parse_args()

    base = args.base.rstrip("/")
    s = requests.Session()
    s.headers.update({"Content-Type": "application/json"})
    print(f"[i] base = {base}")

    # --- health/model ---
    try:
        show_response(s.get(f"{base}/health", timeout=20), "GET /health")
    except Exception as e:
        print(f"[err] /health: {e}")

    try:
        show_response(s.get(f"{base}/model", timeout=20), "GET /model")
    except Exception as e:
        print(f"[err] /model: {e}")


    try:
        r = s.get(f"{base}/embed/debug", timeout=60)
        if r.status_code != 404:
            show_response(r, "GET /embed/debug")
    except Exception as e:
        print(f"[warn] /embed/debug not available: {e}")

    # --- combine-match ---
    try:
        payload = {
            "resume": DEFAULT_RESUME,
            "jobSentences": DEFAULT_JOB_SENTENCES,
            "normalize": args.normalize,
            "topK": args.topk,
        }
        resp = s.post(f"{base}/combine-match", data=json.dumps(payload), timeout=120)
        show_response(resp, "POST /combine-match")
    except Exception as e:
        print(f"[err] /combine-match: {e}")

    # --- search (optional) ---
    if not args.no_search:
        try:
            body = {
                "q": args.search_q,
                "topK": args.search_topk,
                "datasetSlug": args.dataset,
                "kind": args.kind,
                "hybrid": (not args.semantic_only),
            }
            if args.lat is not None and args.lon is not None and args.radius:
                body.update({"lat": args.lat, "lon": args.lon, "radius_km": args.radius})

            t0 = time.time()
            r = s.post(f"{base}/search", data=json.dumps(body), timeout=180)
            dt_sec = time.time() - t0
            label = f"POST /search (hybrid={not args.semantic_only}, topK={args.search_topk}) [{dt_sec:.2f}s]"
            show_response(r, label)
        except Exception as e:
            print(f"[warn] /search not available or failed: {e}")

    if args.no_admin:
        return

    # --- restart_one ---
    if args.doc_id:
        try:
            r = s.post(f"{base}/embed/restart_one/{args.doc_id}", timeout=600)
            show_response(r, f"POST /embed/restart_one/{args.doc_id}")
        except Exception as e:
            print(f"[warn] /embed/restart_one failed: {e}")

    # --- restart_all ---
    try:
        body = {}
        if args.limit and args.limit > 0:
            body["limit"] = args.limit
        if args.page_size:
            body["pageSize"] = args.page_size
        if args.bypass_dataset:
            body["datasetSlug"] = "*"
        elif args.dataset:
            body["datasetSlug"] = args.dataset

        r = s.post(f"{base}/embed/restart_all", data=json.dumps(body), timeout=max(1200, 5 * args.page_size))
        show_response(r, "POST /embed/restart_all")
    except Exception as e:
        print(f"[warn] /embed/restart_all failed: {e}")


if __name__ == "__main__":
    main()
